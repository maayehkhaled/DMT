package com.qpros.quanta.model;

import java.util.concurrent.atomic.AtomicInteger;

public class ProjectCategory extends TestAttribute {

    private static final long serialVersionUID = -7850780488330456977L;
    private static final AtomicInteger atomicInt = new AtomicInteger(0);

    /**
     * Level describes the hierarchy of the test in the tree. A level 0 indicates a parent
     * test. Level 1 indicates an immediate child of the parent, level 2 indicates an immediate
     * child of the Child and so on.. The bottom-most test in the hierarchy is considered
     * a leaf
     */
    private int level = 0;

    /**
     * If this Test is at the top-most level, or in other words, has a level value of 0, parent
     * will be null. This field will only contain a value if the Test is a child, or has a level
     * 1 or greater.
     */
    private ProjectCategory parent;
    /**
     * A structure containing all nodes of this test
     */
    private AbstractStructure<TestAttribute> categoryNode;

    /**
     * A unique ID, generated by AtomicInteger
     */
    private int categoryId = atomicInt.incrementAndGet();

    public ProjectCategory(String k) {
        super(k);
    }

    public boolean isChildNode() {
        return level > 0;
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }


    public void setParent(ProjectCategory parent) {
        this.parent = parent;
    }

    public ProjectCategory getParent() {
        return parent;
    }

    public AbstractStructure<TestAttribute> getNodeContext() {
        if (categoryNode == null) {
            categoryNode = new AbstractStructure<>();
        }

        return categoryNode;
    }
}
